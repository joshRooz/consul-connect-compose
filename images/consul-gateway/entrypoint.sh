#!/usr/bin/dumb-init /bin/bash
set -e

#env | grep -e CONSUL -e COMPOSE_PROJECT_NAME -e GATEWAY_KIND

if [ -n "$CONSUL_LOCAL_CONFIG" ]; then
  echo "$CONSUL_LOCAL_CONFIG" > "/consul/config/local.json"
fi

# generated by config service ; wait for it to do its thing.
until [[ -r "/consul/tls/consul-agent-ca.pem" && -r "/consul/tls/connect-ca.pem" ]] ; do
  sleep 2
done

# fork consul agent process
/bin/consul agent \
-data-dir=/consul/data \
-config-dir=/consul/config \
-datacenter="${COMPOSE_PROJECT_NAME}" \
-encrypt="${CONSUL_GOSSIP_KEY}" \
-retry-join="${COMPOSE_PROJECT_NAME}-consul-server" \
-hcl="acl {
  enabled = true,
  default_policy = \"deny\",
  down_policy = \"extend-cache\",
  tokens { agent = \"${CONSUL_HTTP_TOKEN}\" }
}" \
-hcl='auto_encrypt { tls = true }' \
-hcl='ports { grpc_tls = 8502, serf_wan = -1 }' \
-hcl='tls {
  defaults {
    ca_file = "/consul/tls/consul-agent-ca.pem",
    verify_incoming = false,
    verify_outgoing = true
  },
  grpc {
    use_auto_cert = false
  },
  internal_rpc {
    verify_incoming = true,
    verify_server_hostname = true
  }
}' &

until curl --silent --fail --header "X-Consul-Token: $CONSUL_HTTP_TOKEN" http://localhost:8500/v1/status/leader | grep -qE '(\.|:)+' ; do
  sleep 2
done


case ${GATEWAY_KIND} in
  api)
  ;;

  ingress|igw)
    # create ingress gateway config entry
    consul config write - <<-EOF
			Kind = "ingress-gateway"
			Name = "ingress-gateway"
			Listeners = [{
			  Port = 9002
			  Protocol = "http"
			  Services = [{
			    Name = "counting-ext"
			  },
			  {
			    Name = "counting"
			  }]
			}]
		EOF
    # fork envoy process, wrapped by consul helper to generate bootstrap config
    consul connect envoy \
    -gateway="ingress" \
    -register \
    -grpc-ca-file="/consul/tls/connect-ca.pem" \
    -address '{{ GetInterfaceIP "eth0" }}:20000' \
    -admin-bind="127.0.0.1:19000" &
  ;;

  mesh|mgw)
    consul connect envoy \
    -gateway="mesh" \
    -register \
    -grpc-ca-file="/consul/tls/connect-ca.pem" \
    -address '{{ GetInterfaceIP "eth0" }}:8443' \
    -wan-address '{{ GetInterfaceIP "eth0" }}:8443' \
    -admin-bind="127.0.0.1:19000" &

    #consul config write - <<-EOF
    #EOF
  ;;

  terminating|tgw)
    # register the external service
    curl --insecure "localhost:8500/v1/catalog/register" \
      --header "X-Consul-Token: ${CONSUL_HTTP_TOKEN}" \
      --request PUT \
      -d @- <<-EOF
				{
				  "Node": "no-access-${CONSUL_PARTITION:-default}",
				  "Partition": "${CONSUL_PARTITION:-default}",
				  "Address": "${SERVICE_ADDR}",
				  "Service": {
				    "ID": "counting-ext-1",
				    "Service": "counting-ext",
				    "Port": ${SERVICE_PORT}
				  }
				}
			EOF

    # create terminating gateway config entry
    consul config write - <<-EOF
			Kind = "terminating-gateway"
			Name = "terminating-gateway"
			Services = [{
			  Name = "counting-ext"
			}]
		EOF

    # fork envoy process, wrapped by consul helper to generate bootstrap config
    consul connect envoy \
    -gateway="terminating" \
    -register \
    -grpc-ca-file="/consul/tls/connect-ca.pem" \
    -address '{{ GetInterfaceIP "eth0" }}:20000' \
    -admin-bind="127.0.0.1:19000" &

    # export the service to ccvp-1
    consul config write - <<-EOF
			Kind = "exported-services"
			#Partition = "default"
			Name = "default"
			Services = [{
			  name = "counting-ext"
			  consumers = [{
			    peer = "ccvp1-default"
			  }]
			}]
		EOF
  ;;

  *)
    echo "no valid gateway argument passed. exiting."
    exit 1
  ;;
esac


# cant stop, wont stop...
wait

exit 0
